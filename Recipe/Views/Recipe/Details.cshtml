@using Recipe.ViewModels;
@model RecipeDetailsViewModel;
@{
    ViewData["Title"] = "Recipe Details";
}
@{
    string imageBase64Data = Convert.ToBase64String(Model.Recipe.Image);
    string imageSource = string.Format("data:image/jpg;base64,{0}", imageBase64Data);
}
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css">
<style>
    .foregroundImg {
        cursor: pointer;
        position: relative;
        z-index: 2;
        pointer-events: none;
        filter: brightness(75%);
        border-radius: 10%;
    }

    .backgroundImg {
        position: absolute;
        top: 0px;
        left: 0px;
        z-index: -1;
        filter: blur(25px);
        transform: scale(1.02);
    }

    .border-radius-2 {
        border-radius: 2% !important;
    }

    div.stars {
        width: 200px;
        display: inline-block;
    }

    input.star {
        display: none;
    }

    label.star {
        float: right;
        padding: 10px;
        font-size: 20px;
        color: #444;
        transition: all .2s;
    }

    input.star:checked~label.star:before {
        content: '\f005';
        color: #FD4;
        transition: all .25s;
    }

    input.star-5:checked~label.star:before {
        color: #FE7;
    }

    input.star-1:checked~label.star:before {
        color: #F62;
    }

    label.star:hover {
        transform: rotate(-15deg) scale(1.3);
        cursor: pointer;
    }

    label.star:before {
        content: '\f006';
        font-family: FontAwesome;
    }
</style>

<div class="row">
    <div class="col-md-5">
        <div class="bg-gray-100 w-full mt-5 border-radius-2 relative"
            style="background-image:url('@imageSource'); background-position: center; background-repeat: no-repeat; background-size: cover; z-index:1; height: 25rem;">
            <div class="flex flex-row items-end h-full w-full">
                <div
                    class="flex w-full pb-3 pt-10 px-3 bg-gradient-to-t from-black text-gray-200 border-radius-2 justify-between">
                    <h3 class="text-4xl font-bold leading-5 uppercase mb-3">@Model.Recipe.Name</h3>
                    @if (@Model.IsSaved)
                    {
                        <a class="cursor-pointer text-xl" onclick="Save(@Model.Recipe.RecipeId)"><i class="fas fa-bookmark"
                            id="saveIcon_@Model.Recipe.RecipeId"></i></a>
                    }
                    else
                    {
                        <a class="cursor-pointer text-xl" onclick="Save(@Model.Recipe.RecipeId)"><i class="far fa-bookmark"
                            id="saveIcon_@Model.Recipe.RecipeId"></i></a>
                    }
                </div>
            </div>
        </div>
        <div class="bg-gray-100 w-full mt-5 backgroundImg"
            style="background-image:url('@imageSource'); background-position: center; background-repeat: no-repeat; background-size: cover; height:26rem;">
        </div>
        <div class="mt-5 flex items-center">
            <h3 class="text-2xl font-bold leading-5">@Model.CreatedBy</h3>
            @if (@Model.UserId != @Model.Recipe.CreatedBy)
            {
                @if (@Model.Follows)
                {
                    <button onclick="Follow('@Model.Recipe.CreatedBy')"
                class="btn btn-outline-dark font-bold ml-2">Unfollow</button>
                }
                else
                {
                    <button onclick="Follow('@Model.Recipe.CreatedBy')"
                class="btn btn-outline-primary font-bold ml-2">Follow</button>

                }
            }

        </div>
    </div>
    <div class="col-md-7 mt-5">
        <div class="row">
            <div class="col-md-4 mb-4">
                <div class="card border-light shadow">
                    <div class="card-body flex justify-between  align-items-center p-3">
                        <p>Serving</i>
                        </p>
                        <span
                            class="inline-block rounded-full text-gray-600 bg-gray-100 px-2 py-1 text-sm font-bold mr-3">@Model.Recipe.Serving
                            people</span>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card border-light shadow">
                    <div class="card-body flex justify-between  align-items-center p-3">
                        <p>Time</i>
                        </p>
                        <span
                            class="inline-block rounded-full text-gray-600 bg-gray-100 px-2 py-1 text-sm font-bold mr-3">@Model.Recipe.Time
                            min</span>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card border-light shadow">
                    <div class="card-body flex justify-between  align-items-center p-3">
                        <p>Prepare
                        </p>
                        @if (@Model.Recipe.Prepare == "Easy")
                        {
                            <span
                            class="inline-block rounded-full text-gray-600 bg-green-300 px-2 py-1 text-sm font-bold mr-3">@Model.Recipe.Prepare</span>
                        }
                        @if (@Model.Recipe.Prepare == "Medium")
                        {
                            <span
                            class="inline-block rounded-full text-gray-600 bg-yellow-300 px-2 py-1 text-sm font-bold mr-3">@Model.Recipe.Prepare</span>
                        }
                        @if (@Model.Recipe.Prepare == "Hard")
                        {
                            <span
                            class="inline-block rounded-full text-gray-600 bg-red-300 px-2 py-1 text-sm font-bold mr-3">@Model.Recipe.Prepare</span>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="row flex justify-center">
            <div class="col-md-4 mb-4">
                <div class="card border-light shadow">
                    <div class="card-body flex justify-between  align-items-center p-3">
                        <p>Category
                        </p>
                        <span
                            class="inline-block rounded-full text-gray-600 bg-gray-100 px-2 py-1 text-sm font-bold mr-3">@Model.Recipe.Category</span>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card border-light shadow">
                    <div class="card-body flex justify-between  align-items-center p-3">
                        <p>Calories</i>
                        </p>
                        <span
                            class="inline-block rounded-full text-gray-600 bg-gray-100 px-2 py-1 text-sm font-bold mr-3">@Model.Recipe.Calories
                            kcal</span>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card border-light shadow">
                    <div class="card-body flex justify-between  align-items-center p-3">
                        <p>Rating</i>
                        </p>
                        <span
                            class="inline-block rounded-full text-gray-600 bg-gray-100 px-2 py-1 text-sm font-bold mr-3">@ViewBag.Rating</span>
                    </div>
                </div>
            </div>
        </div>
        <h1 class="font-bold text-xl mb-4">Ingredients</h1>
        <div class="row">
            @foreach (var ingredient in Model.Recipe.RecipeIngredients)
            {
                <div class="col-md-6 mb-4">
                    <div class="card border-light shadow">
                        <div class="card-body flex justify-between  align-items-center p-3">
                            <p>@ingredient.Name
                            </p>
                            <div class="w-20 flex justify-end">
                                <span
                                class="inline-block rounded-full text-gray-600 bg-gray-100 px-2 py-1 text-sm font-bold">@ingredient.Quantity</span>
                            </div>

                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<div class="row mt-8">
    @if (@Model.UserId != @Model.Recipe.CreatedBy)
    {
        @if (@Model.Follows)
        {
            <div class="col-md-12">
                <h1 class="font-bold text-2xl mb-2">Description</h1>
            </div>
            <div class="col-md-12 text-lg" id="RecipeDescription">
                <p>@Model.Recipe.Description</p>
            </div>
        }
        else
        {
            <div class="col-md-12">
                <div class="bg-gray-100 border-t-4 border-gray-500 rounded-b text-gray-900 px-4 py-3 shadow-md" role="alert">
                    <div class="flex">
                        <div class="py-1"><svg class="fill-current h-6 w-6 text-gray-500 mr-4"
                        xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                <path
                            d="M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zm12.73-1.41A8 8 0 1 0 4.34 4.34a8 8 0 0 0 11.32 11.32zM9 11V9h2v6H9v-4zm0-6h2v2H9V5z" />
                            </svg></div>
                        <div>
                            <p class="font-bold">Recipe Content</p>
                            <p class="text-sm">Make sure you follow the user, if you want to see the description for the recipe!
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-md-12">
            <h1 class="font-bold text-2xl mb-2">Description</h1>
        </div>
        <div class="col-md-12 text-lg" id="RecipeDescription">
            <p>@Model.Recipe.Description</p>
        </div>
    }

</div>
<div class="row mt-6 border-t-2 border-gray-300">
    @if (@Model.UserId != @Model.Recipe.CreatedBy)
    {
        <h1 class="font-bold text-lg mb-2 mt-3">Add a review</h1>
        <div class="col-md-12">
            <label for="comment">Comemnt</label>
            <textarea class="w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none" rows="2" name="comment"
            id="reviewComment"></textarea>
        </div>
        <div class="col-md-12">
            <div class="row">
                <div class="col-md-9">
                    <label class="w-full">Select a rating</label>
                    <div class="stars">
                        <input class="star star-5" id="star-5" type="radio" value="5" name="star" />
                        <label class="star star-5" for="star-5"></label>
                        <input class="star star-4" id="star-4" type="radio" value="4" name="star" />
                        <label class="star star-4" for="star-4"></label>
                        <input class="star star-3" id="star-3" type="radio" value="3" name="star" />
                        <label class="star star-3" for="star-3"></label>
                        <input class="star star-2" id="star-2" type="radio" value="2" name="star" />
                        <label class="star star-2" for="star-2"></label>
                        <input class="star star-1" id="star-1" type="radio" value="1" name="star" />
                        <label class="star star-1" for="star-1"></label>
                    </div>
                    <p class="text-red-500 text-xs italic" id="ratingValidation"></p>
                </div>
                <div class="col-md-3 flex justify-end items-end">
                    <button onclick="AddReview('@Model.Recipe.RecipeId')"
                    class="text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded hover:bg-gray-900 hover:text-white">Post</button>
                </div>
            </div>
        </div>
    }

    @foreach (var review in @Model.Recipe.Reviews)
    {
        <div class="col-md-12">
            <div class="flex w-full mt-3">
                <div class="flex-shrink-0 mr-3">
                    <img class="mt-2 rounded-full w-8 h-8 sm:w-10 sm:h-10"
                    src="https://t4.ftcdn.net/jpg/03/46/93/61/360_F_346936114_RaxE6OQogebgAWTalE1myseY1Hbb5qPM.jpg"
                    alt="userProfile">
                </div>
                <div class="flex-1 border rounded-lg px-4 py-2 sm:px-6 sm:py-4 leading-relaxed">
                    <strong>@review.User.Name</strong> <span
                    class="text-xs text-gray-400">@review.CreatedAt.ToString("dd/MM/yyyy H:mm")</span>
                    <p class="text-sm">
                        @review.Comment
                    </p>
                    <div class="mt-2 flex items-center">
                        <div class="text-sm text-gray-500 font-semibold">
                            <span>Rating: </span>
                            @for (int i = 0; i < @review.Rating; i++)
                            {
                                <i class="fas fa-star"></i>
                            }
                            @{
                                int noRating = 5 - @review.Rating;
                            }
                            @for (int i = 0; i < noRating; i++)
                            {
                                <i class="far fa-star"></i>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts{
<script>
    var decodeHTML = function (html) {
        var txt = document.createElement('textarea');
        txt.innerHTML = html;
        return txt.value;
    };
    var decoded = decodeHTML('@Model.Recipe.Description');
    @* console.log(decoded.toString()); *@
        $('#RecipeDescription').html(decoded.toString());

    var Save = function (recipeId) {
        if (recipeId != null) {
            $.ajax({
                type: "POST",
                url: "/Recipe/Save",
                data: { recipeId: recipeId },
                success: function (result) {
                    console.log("the recipe saved or unsaved");
                    var isSavedfas = $('#saveIcon_' + recipeId).hasClass("fas");
                    if (isSavedfas) {
                        $('#saveIcon_' + recipeId).removeClass("fas fa-bookmark");
                        $('#saveIcon_' + recipeId).addClass("far fa-bookmark");
                    } else {
                        $('#saveIcon_' + recipeId).removeClass("far fa-bookmark");
                        $('#saveIcon_' + recipeId).addClass("fas fa-bookmark");
                    }
                },
                error: function (xhr) {
                    alert('Recipe could not be saved due to an error in server!');
                    console.log(xhr);
                }
            });
        }
    };

    var Follow = function (followerId) {
        if (followerId != null) {
            $.ajax({
                type: "POST",
                url: "/Recipe/Follow",
                data: { followerId: followerId },
                success: function (result) {
                    console.log("user followed");
                    setTimeout(() => {
                        location.reload();
                    }, 100);
                },
                error: function (xhr) {
                    alert('User could not be followed due to an error in server!');
                    console.log(xhr);
                }
            });
        }
    };

    var AddReview = function (recipeId) {
        var rating = ($('input[name="star"]:checked').val());
        var comment = ($('#reviewComment').val());
        console.log(recipeId, rating, comment)
        if (rating != null) {
            $.ajax({
                type: "POST",
                url: "/Recipe/AddReview",
                data: { comment: comment, rating: rating, recipeId: recipeId },
                success: function (result) {
                    console.log("review Added");
                    setTimeout(() => {
                        location.reload();
                    }, 100);
                },
                error: function (xhr) {
                    alert('Review could not be followed due to an error in server!');
                    console.log(xhr);
                }
            });
        } else {
            $('#ratingValidation').html("Please select a rating!");
        }
    };
</script>
}